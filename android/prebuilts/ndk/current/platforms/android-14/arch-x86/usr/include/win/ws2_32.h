/*
 * Copyright (C) 2014 Naver Corp. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef _WS2_32_SHIMS_H_INCLUDED_
#define _WS2_32_SHIMS_H_INCLUDED_

#include "sys/cdefs.h"
#if defined(_WINSOCKAPI_) || defined(_WINSOCK2API_)
#if defined(_WINSOCK2_H_NOT_INCLUDED_)
#undef select
#undef _WINSOCK2API_
#undef _WINSOCK2_H_NOT_INCLUDED_
#else
#error WinSock.h must be included from here.
#endif
#endif
#undef  _WINSOCKAPI_
#define FD_SETSIZE      255 /* fdset = 1024 bytes total */
#define INCL_WINSOCK_API_PROTOTYPES 0
#define INCL_WINSOCK_API_TYPEDEFS   1
#include <winsock2.h>

#undef  FD_CLR
#undef  FD_SET
#undef  FD_ZERO
#undef  FD_ISSET

#define FD_SET POSIX_FD_SET

#if(_WIN32_WINNT >= 0x0600)
typedef
int 
(WSAAPI * LPFN_WSASENDMSG)(
    _In_ SOCKET Handle,
    _In_ LPWSAMSG lpMsg,
    _In_ DWORD dwFlags,
    _Out_opt_ LPDWORD lpNumberOfBytesSent,
    _Inout_opt_ LPWSAOVERLAPPED lpOverlapped,
    _In_opt_ LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
#endif // (_WIN32_WINNT >= 0x0600)

#if(_WIN32_WINNT >= 0x0600)
typedef
int
(WSAAPI * LPFN_WSAPOLL)(
    _Inout_ LPWSAPOLLFD fdArray,
    _In_ ULONG fds,
    _In_ INT timeout
    );
#endif // (_WIN32_WINNT >= 0x0600)

typedef
int
(PASCAL FAR * LPFN___WSAFDISSET)(
    SOCKET fd, fd_set FAR *
    );

__BEGIN_DECLS

int     WinSock2WSAStartup(WORD wVersionRequested, _Out_ LPWSADATA lpWSAData);

void    WinSock2WSASetLastError(int iError);

int     WinSock2WSAIoctl(SOCKET s, DWORD dwIoControlCode, _In_reads_bytes_opt_(cbInBuffer) LPVOID lpvInBuffer, DWORD cbInBuffer,
    _Out_writes_bytes_to_opt_(cbOutBuffer, *lpcbBytesReturned) LPVOID lpvOutBuffer, DWORD cbOutBuffer, _Out_ LPDWORD lpcbBytesReturned,
    _Inout_opt_ LPWSAOVERLAPPED lpOverlapped, _In_opt_ LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);

__END_DECLS

#define WSAIoctl        WinSock2WSAIoctl
#define WSASetLastError WinSock2WSASetLastError

#undef  INCL_WINSOCK_API_PROTOTYPES
#define INCL_WINSOCK_API_PROTOTYPES 1
#include <ws2tcpip.h>
#undef  INCL_WINSOCK_API_PROTOTYPES
#define INCL_WINSOCK_API_PROTOTYPES 0

#undef  WSAIoctl
#undef  WSASetLastError

#define inet_pton       inet_pton_a
#define inet_ntop       inet_ntop_a

#define FUNCTION_TABLE_ENTRY(FunctionTypeName) LPFN_##FunctionTypeName FunctionTypeName

typedef struct _WSA2FunctionTable {
    FUNCTION_TABLE_ENTRY(ACCEPT);
    FUNCTION_TABLE_ENTRY(BIND);
    FUNCTION_TABLE_ENTRY(CLOSESOCKET);
    FUNCTION_TABLE_ENTRY(CONNECT);
    FUNCTION_TABLE_ENTRY(IOCTLSOCKET);
    FUNCTION_TABLE_ENTRY(GETPEERNAME);
    FUNCTION_TABLE_ENTRY(GETSOCKNAME);
    FUNCTION_TABLE_ENTRY(GETSOCKOPT);
    FUNCTION_TABLE_ENTRY(HTONL);
    FUNCTION_TABLE_ENTRY(HTONS);
    FUNCTION_TABLE_ENTRY(INET_ADDR);
    FUNCTION_TABLE_ENTRY(INET_NTOA);
    FUNCTION_TABLE_ENTRY(LISTEN);
    FUNCTION_TABLE_ENTRY(NTOHL);
    FUNCTION_TABLE_ENTRY(NTOHS);
    FUNCTION_TABLE_ENTRY(RECV);
    FUNCTION_TABLE_ENTRY(RECVFROM);
    FUNCTION_TABLE_ENTRY(SELECT);
    FUNCTION_TABLE_ENTRY(SEND);
    FUNCTION_TABLE_ENTRY(SENDTO);
    FUNCTION_TABLE_ENTRY(SETSOCKOPT);
    FUNCTION_TABLE_ENTRY(SHUTDOWN);
    FUNCTION_TABLE_ENTRY(SOCKET);
    FUNCTION_TABLE_ENTRY(GETHOSTBYADDR);
    FUNCTION_TABLE_ENTRY(GETHOSTBYNAME);
    FUNCTION_TABLE_ENTRY(GETHOSTNAME);
    FUNCTION_TABLE_ENTRY(GETHOSTNAMEW);
    FUNCTION_TABLE_ENTRY(GETSERVBYPORT);
    FUNCTION_TABLE_ENTRY(GETSERVBYNAME);
    FUNCTION_TABLE_ENTRY(GETPROTOBYNUMBER);
    FUNCTION_TABLE_ENTRY(GETPROTOBYNAME);
    FUNCTION_TABLE_ENTRY(WSASTARTUP);
    FUNCTION_TABLE_ENTRY(WSACLEANUP);
    FUNCTION_TABLE_ENTRY(WSASETLASTERROR);
    FUNCTION_TABLE_ENTRY(WSAGETLASTERROR);
    FUNCTION_TABLE_ENTRY(WSAISBLOCKING);
    FUNCTION_TABLE_ENTRY(WSAUNHOOKBLOCKINGHOOK);
    FUNCTION_TABLE_ENTRY(WSASETBLOCKINGHOOK);
    FUNCTION_TABLE_ENTRY(WSACANCELBLOCKINGCALL);
    FUNCTION_TABLE_ENTRY(WSAASYNCGETSERVBYNAME);
    FUNCTION_TABLE_ENTRY(WSAASYNCGETSERVBYPORT);
    FUNCTION_TABLE_ENTRY(WSAASYNCGETPROTOBYNAME);
    FUNCTION_TABLE_ENTRY(WSAASYNCGETPROTOBYNUMBER);
    FUNCTION_TABLE_ENTRY(WSAASYNCGETHOSTBYNAME);
    FUNCTION_TABLE_ENTRY(WSAASYNCGETHOSTBYADDR);
    FUNCTION_TABLE_ENTRY(WSACANCELASYNCREQUEST);
    FUNCTION_TABLE_ENTRY(WSAASYNCSELECT);
    FUNCTION_TABLE_ENTRY(WSAACCEPT);
    FUNCTION_TABLE_ENTRY(WSACLOSEEVENT);
    FUNCTION_TABLE_ENTRY(WSACONNECT);
    FUNCTION_TABLE_ENTRY(WSACREATEEVENT);
    FUNCTION_TABLE_ENTRY(WSADUPLICATESOCKETA);
    FUNCTION_TABLE_ENTRY(WSADUPLICATESOCKETW);
    FUNCTION_TABLE_ENTRY(WSAENUMNETWORKEVENTS);
    FUNCTION_TABLE_ENTRY(WSAENUMPROTOCOLSA);
    FUNCTION_TABLE_ENTRY(WSAENUMPROTOCOLSW);
    FUNCTION_TABLE_ENTRY(WSAEVENTSELECT);
    FUNCTION_TABLE_ENTRY(WSAGETOVERLAPPEDRESULT);
    FUNCTION_TABLE_ENTRY(WSAGETQOSBYNAME);
    FUNCTION_TABLE_ENTRY(WSAHTONL);
    FUNCTION_TABLE_ENTRY(WSAHTONS);
    FUNCTION_TABLE_ENTRY(WSAIOCTL);
    FUNCTION_TABLE_ENTRY(WSAJOINLEAF);
    FUNCTION_TABLE_ENTRY(WSANTOHL);
    FUNCTION_TABLE_ENTRY(WSANTOHS);
    FUNCTION_TABLE_ENTRY(WSARECV);
    FUNCTION_TABLE_ENTRY(WSARECVDISCONNECT);
    FUNCTION_TABLE_ENTRY(WSARECVFROM);
    FUNCTION_TABLE_ENTRY(WSARESETEVENT);
    FUNCTION_TABLE_ENTRY(WSASEND);
#if(_WIN32_WINNT >= 0x0600)
    FUNCTION_TABLE_ENTRY(WSASENDMSG);
#endif
    FUNCTION_TABLE_ENTRY(WSASENDDISCONNECT);
    FUNCTION_TABLE_ENTRY(WSASENDTO);
    FUNCTION_TABLE_ENTRY(WSASETEVENT);
    FUNCTION_TABLE_ENTRY(WSASOCKETA);
    FUNCTION_TABLE_ENTRY(WSASOCKETW);
    FUNCTION_TABLE_ENTRY(WSAWAITFORMULTIPLEEVENTS);
    FUNCTION_TABLE_ENTRY(WSAADDRESSTOSTRINGA);
    FUNCTION_TABLE_ENTRY(WSAADDRESSTOSTRINGW);
    FUNCTION_TABLE_ENTRY(WSASTRINGTOADDRESSA);
    FUNCTION_TABLE_ENTRY(WSASTRINGTOADDRESSW);
    FUNCTION_TABLE_ENTRY(WSALOOKUPSERVICEBEGINA);
    FUNCTION_TABLE_ENTRY(WSALOOKUPSERVICEBEGINW);
    FUNCTION_TABLE_ENTRY(WSALOOKUPSERVICENEXTA);
    FUNCTION_TABLE_ENTRY(WSALOOKUPSERVICENEXTW);
#if(_WIN32_WINNT >= 0x0501)
    FUNCTION_TABLE_ENTRY(WSANSPIOCTL);
#endif
    FUNCTION_TABLE_ENTRY(WSALOOKUPSERVICEEND);
    FUNCTION_TABLE_ENTRY(WSAINSTALLSERVICECLASSA);
    FUNCTION_TABLE_ENTRY(WSAINSTALLSERVICECLASSW);
    FUNCTION_TABLE_ENTRY(WSAREMOVESERVICECLASS);
    FUNCTION_TABLE_ENTRY(WSAGETSERVICECLASSINFOA);
    FUNCTION_TABLE_ENTRY(WSAGETSERVICECLASSINFOW);
    FUNCTION_TABLE_ENTRY(WSAENUMNAMESPACEPROVIDERSA);
    FUNCTION_TABLE_ENTRY(WSAENUMNAMESPACEPROVIDERSW);
#if(_WIN32_WINNT >= 0x0600)
    FUNCTION_TABLE_ENTRY(WSAENUMNAMESPACEPROVIDERSEXA);
    FUNCTION_TABLE_ENTRY(WSAENUMNAMESPACEPROVIDERSEXW);
#endif
    FUNCTION_TABLE_ENTRY(WSAGETSERVICECLASSNAMEBYCLASSIDA);
    FUNCTION_TABLE_ENTRY(WSAGETSERVICECLASSNAMEBYCLASSIDW);
    FUNCTION_TABLE_ENTRY(WSASETSERVICEA);
    FUNCTION_TABLE_ENTRY(WSASETSERVICEW);
    FUNCTION_TABLE_ENTRY(WSAPROVIDERCONFIGCHANGE);
#if(_WIN32_WINNT >= 0x0600)
    FUNCTION_TABLE_ENTRY(WSAPOLL);
#endif
    FUNCTION_TABLE_ENTRY(__WSAFDISSET);
    FUNCTION_TABLE_ENTRY(GETADDRINFO);
    FUNCTION_TABLE_ENTRY(FREEADDRINFO);
#if(_WIN32_WINNT >= 0x0600)
    FUNCTION_TABLE_ENTRY(INET_PTONA);
    FUNCTION_TABLE_ENTRY(INET_NTOPA);
#endif
} WSA2FunctionTable;

EXTERN_C WSA2FunctionTable* functionTable(void);

#define FORWARD_CALL(FunctionName) functionTable()->FunctionName

#endif /* _WS2_32_SHIMS_H_INCLUDED_ */
